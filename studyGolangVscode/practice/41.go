package main

import (
	"fmt"
	"unsafe" // 표준패키지. 안전하지 않은 함수들을 제공
)

type User struct {
	A int8 // 1바이트
	C int8 // 1바이트
	E int8 // 1바이트
	B int  //8 바이트
	D int  //8 바이트

} // 19바이트

func main() {
	user := User{1, 2, 3, 4, 5}
	fmt.Println(unsafe.Sizeof(user))
}

// 결과값24
// 19바이트인데 24바이트를 쓴다 -> 메모리 낭비 줄였다. 기존에는 40이었다.

//8바이트보다 작은 필드는 8바이트 크기(단위)를 고려해서 몰아서 배치하자.
// 메모리가 작은 환경에서는 이렇게 작업하면 좋다.
// 일반적인 데스크탑에서는 굳이 할 필요는 없다. 용량이 크니까.

// 구조체의 역할
/*
결합도(의존성)은 낮게 응집도는 높게
low coupling, high cohesion
함수는 관련 코드 블록을 묶어서 응집도를 높이고 재사용성을 증가시킨다.
배열은 같은 타입의 데이터들을 묶어서 응집도를 높인다.
구조체는 관련된 데이터들을 묶어서 응집도를 높이고 재사용성을 증가시킨다.

구조체는 객체 지향 프로그래밍의 기반이 됨.
일반적인 언어에서의 class는 아니지만 오브젝트라고는 할 수 있다.

객체와 객체 사이의 관계가 중요해지는 거다.

Go언어는 클래스가 없고 그냥 구조체만 지원한다.
Go언어에서는 structure가 객체다.
structure가 객체지향언어로 나아가는 기반이 된다.


*/
